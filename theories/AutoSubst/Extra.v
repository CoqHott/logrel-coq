(** * LogRel.AutoSubst.Extra: extra content to better handle the boilerplate generated by AutoSubst. *)

(** This is the only file in the AutoSubst submodule that is not automatically generated. *)
From smpl Require Import Smpl.
From Coq Require Import ssrbool List.
From LogRel.AutoSubst Require Import core unscoped Ast.
From LogRel Require Import Utils BasicAst.

(* Export UnscopedNotations.
#[global] Open Scope subst_scope. *)

Declare Scope asubst_scope.
Delimit Scope asubst_scope with asub.

Arguments funcomp {X Y Z}%type_scope (g f)%function_scope.

Notation "f >> g" := (funcomp g f) (at level 50) : function_scope.

Notation "s .: sigma" := (scons s sigma) (at level 55, sigma at next level, right associativity) : asubst_scope.

Notation "s ⟨ xi1 ⟩" := (ren1 xi1 s) (at level 7, left associativity, format "s ⟨ xi1 ⟩") : asubst_scope.
(* Notation "⟨ xi ⟩" := (ren1 xi) (at level 1, left associativity, format "⟨ xi ⟩") : function_scope. *)

Notation "s [ sigma ]" := (subst1 sigma s) (at level 7, left associativity, format "s '/' [ sigma ]") : asubst_scope.

Notation "s [ t ]⇑" := (subst_term (scons t (shift >> tRel)) s) (at level 7, left associativity, format "s '/' [ t ]⇑") : asubst_scope.

Notation "s '..'" := (scons s ids) (at level 1, format "s ..") : asubst_scope.

Notation "↑" := (shift) : asubst_scope.

#[global] Open Scope asubst_scope.

Notation U := (tSort set).
Notation "'eta_expand' f" := (tApp f⟨↑⟩ (tRel 0)) (at level 40, only parsing).

#[global] Instance Ren1_subst {Y Z : Type} `{Ren1 (nat -> nat) Y Z} :
  (Ren1 (nat -> nat) (nat -> Y) (nat -> Z)) :=
  fun ρ σ i => (σ i)⟨ρ⟩.
    
Ltac fold_autosubst :=
    fold ren_term ;
    fold subst_term.

Smpl Add fold_autosubst : refold.

Ltac change_autosubst :=
    change ren_term with (@ren1 _ _ _ Ren_term) in * ;
    change subst_term with (@subst1 _ _ _ Subst_term) in *;
    change (fun i => (?σ i)⟨?ρ⟩) with (@ren1 _ _ _ Ren1_subst ρ σ) in *.

Smpl Add 50 change_autosubst : refold.

Arguments ren1 {_ _ _}%type_scope {Ren1} _ !_/.
(* Ideally, we'd like Ren_term to not be there, and ren_term to be directly the Ren1 instance… *)
Arguments Ren_term _ _ /.
Arguments Ren1_subst {_ _ _} _ _/.

Notation arr A B := (tProd A B⟨↑⟩).
Notation comp A f g := (tLambda A (tApp f⟨↑⟩ (tApp g⟨↑⟩ (tRel 0)))).
Notation idterm A  := (tLambda A (tRel 0)).

Lemma arr_ren1 {A B} : forall ρ, (arr A B)⟨ρ⟩ = arr A⟨ρ⟩ B⟨ρ⟩.
Proof.
  now asimpl.
Qed.

Definition elimSuccHypTy P :=
  tProd tNat (arr P P[tSucc (tRel 0)]⇑).

Fixpoint tApps (fn : list term) (t : term) :=
  match fn with
  | nil => t
  | f :: fn' => tApp f (tApps fn' t)
  end.

Definition eta_expands (fn : list term) :=
  (tApps (list_map (fun f => f⟨↑⟩) fn) (tRel 0)).

Definition comps (A : term) (fn : list term) :=
  tLambda A (eta_expands fn).

(** Flattening of map on lists; used in AlgorithmicTyping and Functions *)

Module Map.
  (** Triple of terms collecting the data of accumulated maps 
      The record needs to be negative so that we can use it in the 
      rule neuMapCompact *)
  #[projections(primitive)]
  Record data : Set := 
    mk { srcTy : term ; tys : list (term × term) ; fn : list term ; lst : term }.

  Definition id (A k : term) : data := Map.mk A [::] [::] k.
 
  Fixpoint decompose (T t : term) : data :=
  match t with
  | tMap B A f l =>
      let r := decompose B l in
      mk r.(srcTy) ((B,A) :: r.(tys)) (f :: r.(fn)) r.(lst)
  | k => id T k
  end.

  Fixpoint recompose_aux tys fn lst :=
    match tys, fn with
    | [::], _ => lst
    | _, [::] => lst
    | (A,B) :: tys', f :: fn' => tMap A B f (recompose_aux tys' fn' lst)
    end.

  Definition recompose (d : data) := recompose_aux d.(tys) d.(fn) d.(lst).

  Definition compact (tgt : term) (r : Map.data) :=
    tMap (srcTy r) tgt (comps (srcTy r) (fn r)) (lst r).

  Lemma decompose_recompose T t : recompose (decompose T t) = t.
  Proof.
    induction t in T |- * ; cbn.
    all: try reflexivity.
    f_equal.
    easy.
  Qed.

  Lemma decompose_lst_eq (T T' t : term) :
    (decompose T t).(lst) = (decompose T' t).(lst).
  Proof.
    now destruct t.
  Qed.

  Lemma decompose_fn_eq (T T' t : term) :
    (decompose T t).(fn) = (decompose T' t).(fn).
  Proof.
    now destruct t.
  Qed.

  Definition is_map t :=
    match t with | tMap _ _ _ _ => true | _ => false end.

  Lemma compact_id {A t} : ~~ is_map t -> decompose A t = id A t.
  Proof.
    destruct t; cbn; try reflexivity; discriminate.
  Qed.

  (* for n a whne_list (in context Γ), 
     returns a pair (h, r) such that
     Γ, x : A ⊢ h : B,  Γ ⊢ r : list A and n ~ map (λ x. h) r*)
  Definition eta n :=
    match n with
    | tMap _ _ f l => (eta_expand f, l)
    | u => (tRel 0, u)
    end.

End Map.